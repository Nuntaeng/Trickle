#include "Kanetuki.h"
using namespace std;
		
const int IMAGE_SIZE = 64;		//画像サイズ
const int HOT_SPEED = 3;        //水蒸気になるまでのカウンタ増加量
const int HOT_MAX = 90;         //水蒸気になるときの最大カウンタ

//☆☆☆☆//-----------------------------------------------------------------------------
Kanetuki::Kanetuki()
{
	
}
//☆☆☆☆//-----------------------------------------------------------------------------
Kanetuki::Kanetuki(Vec2 pos)
{
	Pos.push_back(pos);          //座標データを保存する
}
//☆☆☆☆//-----------------------------------------------------------------------------
Kanetuki::~Kanetuki()
{

}
//☆☆☆☆//-----------------------------------------------------------------------------
void Kanetuki::Initialize()
{
	//データのやり取り
	for (int i = 0; i < 2; ++i)                    //データが2個分
	{
		HotCount[i] = 0;                           //水蒸気になるまでのカウンタ
		hitflag[i] = false;                        //当たり判定フラグをfalse
		hitBace[i].objectTag = "Kanetuki";         //オブジェクトタグの指定
		hitBace[i].CreateObject(Objform::Cube, Pos[i], Vec2(IMAGE_SIZE, IMAGE_SIZE), 0);           //当たり判定を生成する
	}
	//当たり判定を行う
	for (int i = 0; i < 2; ++i)                    //データが2個分
	{
		this->hitBace[i].CollisionProcess = [&](const Object& o_)
		{
			if (o_.objectTag == "Water")
			{
				//水が液体か個体ならば
				if ((((Water&)o_).GetState() == Water::State::SOLID) || ((Water&)o_).GetState() == Water::State::LIQUID)
				{
					HotCount[i] += HOT_SPEED;
					if (HotCount[i] >= HOT_MAX)
					{
						HotCount[i] = 0;
						((Water&)o_).SetState(Water::State::GAS);
					}
				}
			}
		};
	}
}
//☆☆☆☆//-----------------------------------------------------------------------------
void Kanetuki::UpDate()
{

}
//☆☆☆☆//-----------------------------------------------------------------------------
void Kanetuki::Finalize()
{
	
}
//☆☆☆☆//-----------------------------------------------------------------------------
//  関数  //-----------------------------------------------------------------------------
//☆☆☆☆//-----------------------------------------------------------------------------
void Kanetuki::Input_Pos(Vec2 pos)
{
	Pos.push_back(pos);                  //座標データを保存する
}
//☆☆☆☆//-----------------------------------------------------------------------------
//  関数  //-----------------------------------------------------------------------------
//☆☆☆☆//-----------------------------------------------------------------------------
void Kanetuki::CheakHit()
{
	
}